import org.apache.tools.ant.filters.ReplaceTokens

group = 'com:springfans'

apply plugin: "java"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "groovy"
apply plugin: "maven-publish"
apply plugin: "com.dorongold.task-tree"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

//apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "docker"
apply plugin: "propdeps"
apply plugin: "propdeps-idea"
apply plugin: 'com.google.protobuf'

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
        maven { url "http://nexus.intranet.huiyin.com/repository/maven-public/" }
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }

    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE"
        classpath "gradle.plugin.org.sgornostal:gradle-docker-plugin:1.5.3"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.1.RELEASE"
        classpath "org.ajoberstar:grgit:1.7.2"
        classpath "com.bmuschko:gradle-nexus-plugin:2.3.1"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.3"
    }
}

repositories {
    mavenLocal()
    maven { url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
    maven { url "http://nexus.intranet.huiyin.com/repository/maven-public/" }
    mavenCentral()
}

def grpcVersion = '1.11.0'

dependencies {
    compile 'org.codehaus.janino:janino:3.0.6'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    compile 'org.springframework.cloud:spring-cloud-starter-config'

    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'


    compile('org.springframework.boot:spring-boot-starter-jdbc') {
        exclude module: "tomcat-jdbc"
    }
    compile 'com.zaxxer:HikariCP'
    runtime 'mysql:mysql-connector-java'

    compile 'io.dropwizard:dropwizard-validation:1.1.2'
    compile 'com.google.guava:guava:20.0'
    compile 'org.apache.commons:commons-lang3:3.6'

    compile "com.google.api.grpc:proto-google-common-protos:1.0.0"
    compile "io.grpc:grpc-alts:${grpcVersion}"
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.netty:netty-tcnative-boringssl-static:2.0.7.Final"
}

processResources {
    eachFile { details ->
        if (!details.name.endsWith('.p12') && !details.name.endsWith('.html')) {
            details.filter(ReplaceTokens, tokens: ["project.version": project.version])
            details.filter(ReplaceTokens, tokens: ["project.name": project.name])
        }
    }
}

processResources.doLast {
    copy {
        from "$buildDir/resources/main"
        into "$buildDir/idea/main"
    }
}

compileJava.dependsOn(processResources)

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:none"
    options.encoding = "UTF-8"
    options.debug = true // if set false stacktrace will not have line numbers
    //enable compilation in a separate daemon process
    options.fork = true
    //enable incremental compilation
    options.incremental = true
    options.warnings = false
    options.deprecation = false
    options.verbose = false
    options.failOnError = true
}

compileJava.doLast {
    copy {
        from "$buildDir/classes/java/main"
        into "$buildDir/idea/main"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task copyJar(type: Copy, dependsOn: bootRepackage) {
    from(jar.archivePath) {
        exclude("*.javadoc.jar", "*.sources.jar", "*.original")
    }
    into(project.projectDir)
    rename { filename -> project.name + ".jar" }
}

clean {
    delete project.name + ".jar"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            //artifact javadocJar
        }
    }
    repositories {
        maven {
            url "http://nexus.intranet.huiyin.com/repository/maven-${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials {
                username 'admin'
                password 'admin123'
            }
        }
    }
}

publish.dependsOn(build)

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE"
    }
}

configurations {
    all {
        // check for updates every build (for snapshot dependency)
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }
}

/*
processResources.dependsOn(generateGitProperties)

gitProperties {
    dateFormat = "yyyy-MM-dd HH:mm"
    dateFormatTimeZone = "GMT+8"
}
*/

idea {
    module {
        outputDir file("$buildDir/idea/main")
        testOutputDir file("$buildDir/idea/test")
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1-1'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
        resources {
            srcDirs 'src/main/proto'
        }
    }
}
